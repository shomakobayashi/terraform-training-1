name: terraform
on:
  push:
    branches:
      - develop
      - 'feature-#**'
    paths:
      - 'projects/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      project_id:
        description: "Project Identifier"
        required: true
      plan_apply_id:
        type: choice
        description: "plan/apply"
        options:
        - plan
        - apply
        required: true
        default: "plan"
      tl_approved_id:
        type: boolean
        description: "TL Approved"
        default: false
      tfstate_uhlock_id:
        type: boolean
        description: "tfstate unlock"
        default: false

jobs:
  get-information:
    runs-on: [self-hosted, linux, x64, gdp_infra_full_access]

    env:
      ENV: "dev"
      SEPARATOR1: "[["
      SEPARATOR2: "]]"
      PROJECTS: "./projects"

    outputs:
      work_dir: ${{ steps.check_project.outputs.work_dir }}
      plan_apply: ${{ steps.check_project.outputs.work_dir }}
      unlock: ${{ steps.check_project.outputs.unlock }}
      project: ${{ steps.check_project.outputs.project }}
      tl_approved: ${{ steps.check_project.outputs.tl_approved }}

    steps:
      - name: Check Project Identifier
        id: check_project
        run: |
          mes=$(echo ${{ github.event.head_commit.message }} | awk '{ gsub("","", $0); print)')
          sep1=$(echo ${{ env. SEPARATOR1 }})
          sep2=$(echo ${{ env. SEPARATOR2 }})
          github_event_name=$(echo ${{ github.event_name }})
          input_project_id=$(echo ${{ github.event.inputs.project_id }}) 
          input_plan_apply=$(echo ${{ github.event.inputs.plan_apply_id }})
          input_unlock=$(echo ${{ github.event.inputs.tfstate_unlock_id }})
          input_tl_approved=$(echo ${{ github.event.inputs.tl_approved_id }})
          if [ -n "$input_project_id"] && [ "$github_event_name" == "workflow_dispatch" ]; then
            project_id=$input_project_id
          elif [ -z "$input_project_id"] && [ "$github_event_name" == "push" ]; then
            project_id=$(echo $mes $sep1 $sep2 | awk '{print substr($1, index($1, $2)+length($2), index($1, $3)-index($1, $2)-length($3))}')
            input_plan_apply="plan"
          fi
          if [ -z "$project_id" ]:then
            echo "プロジェクト識別子未設定なので終了します"
            echo "work_dir= __not_difined" >> $GITHUB_OUTPUT
            echo "plan_apply=__not_difined" >> $GITHUB_OUTPUT
          else
           echo "work_dir=${{ env.PROJECTS }}/${project_id}/${{ env.ENV }}/" >> $GITHUB_OUTPUT
           echo "plan_apply=${input_plan_apply}" >> $GITHUB_OUTPUT
           echo "unlock=${input_unlock}" >> $GITHUB_OUTPUT
           echo "project=${input_project_id}" >> $GITHUB_OUTPUT
           echo "tl_approved=${input_tl_approved}" >> $GITHUB_OUTPUT
          fi

  A_terraform_plan:
    if: needs.get-information.outputs.work_dir != '__not_difined' && needs.get-information.outputs.unlock != 'true'
    runs-on: [self-hosted, linux, x64, aws_and_infra_fullaccess]
    needs: get-information

    env:
      ENV: "dev"
      TF_VERSION: "0.14.9"
      AWS_STS_REGIONAL_ENDPOINTS: "regional"
      WORKING_DIR: ${{ needs.get-information.outputs.work_dir }}
      PLAN_APPLY: ${{ needs.get-information.outputs.plan_apply }}

    steps:
      - uses: actions/checkout@v3

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -no-color


  B_terraform_apply:
    if: needs.get-information.outputs.plan_apply == 'apply' && needs.get-information.outputs.work_dir != '__not_difined' && needs.get-information.outputs.unlock != 'true' && needs.get-information.outputs.tl_approved == 'true'
    runs-on: [selh-hosted, linux, x64, aws_and_infra_full_access]
    needs: [get-information, A_terraform_plan]

    env:
      ENV: "dev"
      TF_VERSION: "0.14.9"
      AWS_STS_REGIONAL_ENDPOINTS: "regional"
      WORKING_DIR: ${{ needs.get-information.outputs.work_dir }}
      PLAN_APPLY: ${{ needs.get-information.outputs.plan_apply }}

    steps:
      - uses: actions/checkout@v3

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply -no-color -auto-approve

  C_tfstate_unlock:
    if: needs.get-information.outputs.unlock == 'true'
    runs-on: [self-hosted, linux, aws_and_infra_full_access]
    needs: get-information

    env:
      ENV: "dev"
      TF_VERSION: "0.14.9"
      AWS_STS_REGIONAL_ENDPOINTS: "regional"
      WORKING_DIR: ${{ needs.get-information.outputs.work_dir }}
      PROJECT: ${{ needs.get-information.outputs.project }}

    steps:
      - name: tfstate unlock
        id: unlock
        run: |
          aws dynamodb describe-table --table-name "aws-and-infra-${{ env.ENV }}-dynamodb-terraform-locks"
          aws dynamodb scan --table-name "aws-and-infra-${{ env.ENV }}-dynamodb-terraform-locks"
          aws dynamodb delete-item --table-name "aws-and-infra-${{ env.ENV }}-dynamodb-terraform-locks" --key '{"LockID": { "S": "aws-and-infra-${{ env.ENV }}-s3-terraform-state/${{ env.PROJECT }}/terraform.tfstate"}}'
